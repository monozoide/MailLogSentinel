name: MLS CI

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]

permissions:
  contents: read
  pull-requests: read

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.collect.outputs.code_changed }}
      docs_changed: ${{ steps.collect.outputs.docs_changed }}
      only_docs: ${{ steps.collect.outputs.only_docs }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # PR: diff base/head géré automatiquement
      - name: Paths filter (PR)
        id: filter_pr
        if: ${{ github.event_name == 'pull_request' }}
        uses: dorny/paths-filter@v3
        with:
          filters: |
            code:
              - 'src/**'
              - 'app/**'
              - 'lib/**'
              - 'scripts/**'
              - '**/*.py'
              - '**/*.rs'
              - '**/*.go'
              - '**/*.ts'
              - '**/*.js'
              - '**/*.tsx'
              - '**/*.jsx'
              - 'tests/**'
              - 'pytest.ini'
              - 'pyproject.toml'
              - 'setup.cfg'
              - 'requirements*.txt'
              - '**/*.html'
            docs:
              - 'docs/**'
              - '**/*.md'
              - '**/*.mdx'
              - '**/*.txt'
              - '**/*.rst'
              - '**/*.yml'
              - '**/*.yaml'
              - '**/*.json'
              - '**/*.toml'
              - '**/*.cfg'
              - '**/*.png'
              - '**/*.jpg'
              - '**/*.jpeg'
              - '**/*.svg'
              - '**/*.log'
              - '**/*.csv'

      # PUSH: on force la base/ref du diff
      - name: Paths filter (push)
        id: filter_push
        if: ${{ github.event_name == 'push' }}
        uses: dorny/paths-filter@v3
        with:
          base: ${{ github.event.before }}
          ref:  ${{ github.sha }}
          filters: |
            code:
              - 'src/**'
              - 'app/**'
              - 'lib/**'
              - 'scripts/**'
              - '**/*.py'
              - '**/*.rs'
              - '**/*.go'
              - '**/*.ts'
              - '**/*.js'
              - '**/*.tsx'
              - '**/*.jsx'
              - 'tests/**'
              - 'pytest.ini'
              - 'pyproject.toml'
              - 'setup.cfg'
              - 'requirements*.txt'
              - '**/*.html'
            docs:
              - 'docs/**'
              - '**/*.md'
              - '**/*.mdx'
              - '**/*.txt'
              - '**/*.rst'
              - '**/*.yml'
              - '**/*.yaml'
              - '**/*.json'
              - '**/*.toml'
              - '**/*.cfg'
              - '**/*.png'
              - '**/*.jpg'
              - '**/*.jpeg'
              - '**/*.svg'
              - '**/*.log'
              - '**/*.csv'

      # On collecte les sorties en un seul endroit (ID unique)
      - name: Collect outputs
        id: collect
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            CODE='${{ steps.filter_push.outputs.code }}'
            DOCS='${{ steps.filter_push.outputs.docs }}'
          else
            CODE='${{ steps.filter_pr.outputs.code }}'
            DOCS='${{ steps.filter_pr.outputs.docs }}'
          fi

          echo "code_changed=$CODE" >> "$GITHUB_OUTPUT"
          echo "docs_changed=$DOCS" >> "$GITHUB_OUTPUT"

          if [ "$DOCS" = "true" ] && [ "$CODE" != "true" ]; then
            echo "only_docs=true" >> "$GITHUB_OUTPUT"
          else
            echo "only_docs=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Debug
        run: |
          echo "code=${{ steps.collect.outputs.code_changed }}"
          echo "docs=${{ steps.collect.outputs.docs_changed }}"
          echo "only_docs=${{ steps.collect.outputs.only_docs }}"


  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Install deps for lint
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install ruff
      - run: ruff check .

  tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Install deps for tests
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -r requirements-dev.txt || true
          pip install pytest
      - run: |
          export PYTHONPATH=$PYTHONPATH:.
          pytest --maxfail=1 --disable-warnings -q

  docs-only:
    name: Docs-only fast path
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.only_docs == 'true'
    steps:
      - run: echo "Docs/meta only → skipping lint/tests ✅"
